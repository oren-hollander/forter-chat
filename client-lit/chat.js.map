{"version":3,"file":"chat.js","sourceRoot":"","sources":["src/chat.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,KAAK,CAAA;AAC3C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAE3D;;;;;;GAMG;AAEH,IAAa,SAAS,GAAtB,MAAa,SAAU,SAAQ,UAAU;IAAzC;;QAUE;;WAEG;QAEH,SAAI,GAAG,OAAO,CAAA;QAEd;;WAEG;QAEH,UAAK,GAAG,CAAC,CAAA;IAsBX,CAAC;IApBU,MAAM;QACb,OAAO,IAAI,CAAA;YACH,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;uBACb,IAAI,CAAC,QAAQ,+BAA+B,IAAI,CAAC,KAAK;;KAExE,CAAA;IACH,CAAC;IAEO,QAAQ;QACd,IAAI,CAAC,KAAK,EAAE,CAAA;QACZ,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,eAAe,CAAC,CAAC,CAAA;IACtD,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,IAAY;QACnB,OAAO,UAAU,IAAI,EAAE,CAAA;IACzB,CAAC;CACF,CAAA;AAzCiB,gBAAM,GAAG,GAAG,CAAA;;;;;;;GAO3B,CAAA;AAMD;IADC,QAAQ,EAAE;uCACG;AAMd;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;wCAClB;AApBE,SAAS;IADrB,aAAa,CAAC,YAAY,CAAC;GACf,SAAS,CA0CrB;SA1CY,SAAS","sourcesContent":["import { LitElement, html, css } from 'lit'\nimport { customElement, property } from 'lit/decorators.js'\n\n/**\n * An example element.\n *\n * @fires count-changed - Indicates when the count changes\n * @slot - This element has a slot\n * @csspart button - The button\n */\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  static override styles = css`\n    :host {\n      display: block;\n      border: solid 1px gray;\n      padding: 16px;\n      max-width: 800px;\n    }\n  `\n\n  /**\n   * The name to say \"Hello\" to.\n   */\n  @property()\n  name = 'World'\n\n  /**\n   * The number of times the button has been clicked.\n   */\n  @property({ type: Number })\n  count = 0\n\n  override render() {\n    return html`\n      <h1>${this.sayHello(this.name)}!</h1>\n      <button @click=${this._onClick} part=\"button\">Click Count: ${this.count}</button>\n      <slot></slot>\n    `\n  }\n\n  private _onClick() {\n    this.count++\n    this.dispatchEvent(new CustomEvent('count-changed'))\n  }\n\n  /**\n   * Formats a greeting\n   * @param name The name to say \"Hello\" to\n   */\n  sayHello(name: string): string {\n    return `Hello, ${name}`\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'my-element': MyElement\n  }\n}\n"]}