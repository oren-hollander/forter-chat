{"version":3,"file":"chatService.js","sourceRoot":"","sources":["src/chatService.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,OAAmB,EAA0B,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,UAAU,CAAC,CAAA;AAC7G,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,OAAmB,EAAwB,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAA;AACvG,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,OAAmB,EAAiC,EAAE,CACtF,OAAO,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAA;AAI7C,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,OAAmB,EAAe,EAAE;IACjE,IAAI,UAAU,CAAC,OAAO,CAAC,EAAE;QACvB,OAAO,UAAU,CAAA;KAClB;SAAM,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;QAC5B,OAAO,QAAQ,CAAA;KAChB;SAAM,IAAI,iBAAiB,CAAC,OAAO,CAAC,EAAE;QACrC,OAAO,SAAS,CAAA;KACjB;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAA;KACnC;AACH,CAAC,CAAA;AAED,MAAM,IAAI,GAAG,KAAK,EAAE,GAAW,EAAE,IAAa,EAAqB,EAAE;IACnE,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;QAChC,MAAM,EAAE,MAAM;QACd,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;SACnC;QACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;KAC3B,CAAC,CAAA;IACF,OAAO,QAAQ,CAAA;AACjB,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,EAAE,GAAW,EAAyB,EAAE;IACtE,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,0BAA0B,GAAG,EAAE,CAAC,CAAA;IAC7D,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;AAC9B,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,GAAG,GAAG,KAAK,EAAE,QAAgB,EAAiB,EAAE;IAC3D,MAAM,IAAI,CAAC,qBAAqB,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAA;AACjD,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,MAAM,GAAG,KAAK,EAAE,UAAkB,EAAE,MAAc,EAAiB,EAAE;IAChF,MAAM,IAAI,CAAC,qBAAqB,UAAU,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,CAAA;AAC3D,CAAC,CAAA","sourcesContent":["import { MessageDTO, QuestionDTO, AnswerDTO, SimilarQuestionDTO } from './api'\n\nexport const isQuestion = (message: MessageDTO): message is QuestionDTO => message.hasOwnProperty('question')\nexport const isAnswer = (message: MessageDTO): message is AnswerDTO => message.hasOwnProperty('answer')\nexport const isSimilarQuestion = (message: MessageDTO): message is SimilarQuestionDTO =>\n  message.hasOwnProperty('similarQuestionId')\n\nexport type MessageType = 'question' | 'answer' | 'similar'\n\nexport const getMessageType = (message: MessageDTO): MessageType => {\n  if (isQuestion(message)) {\n    return 'question'\n  } else if (isAnswer(message)) {\n    return 'answer'\n  } else if (isSimilarQuestion(message)) {\n    return 'similar'\n  } else {\n    throw new Error('Unknown message')\n  }\n}\n\nconst post = async (url: string, body: unknown): Promise<Response> => {\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(body),\n  })\n  return response\n}\n\nexport const getMessages = async (seq: number): Promise<MessageDTO[]> => {\n  const response = await fetch(`/api/chat/messages?seq=${seq}`)\n  return await response.json()\n}\n\nexport const ask = async (question: string): Promise<void> => {\n  await post('/api/chat/questions', { question })\n}\n\nexport const answer = async (questionId: string, answer: string): Promise<void> => {\n  await post(`/api/chat/answers/${questionId}`, { answer })\n}\n"]}